import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
from random import shuffle

API_TOKEN = "7108357216:AAF9fM_pQekSdMqzx554unxiyIy88D336l0"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

chat_list = {}
time_now = datetime.now()

def player_in_game(player_id):
    for chat in chat_list.values():
        if player_id in chat['players']:
            return True
    return False

async def change_role(player_id, player_dict, new_role, text):
    player_dict[player_id]['role'] = new_role
    await bot.send_message(player_id, text)

async def list_buttons(player_dict, game_id, player_role, text):
    players_btn = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=val['name'], callback_data=f'{key}{player_role[0]}{game_id}') for key, val in player_dict.items() if val['role'] != player_role]
    ])
    message = await bot.send_message(game_id, text, reply_markup=players_btn)
    return message.message_id

async def choice_checker(chat_id, chat, player_role):
    if not chat[player_role]:
        await bot.edit_message_text(chat_id=chat_id, message_id=chat[f'{player_role[0]}List_id'], text='–í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ...', reply_markup=None)
        chat[player_role] = True

def players_alive(player_dict):
    mes = "*–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:*"
    for i, player in enumerate(player_dict.values(), 1):
        mes += f'\n{i}. {player["name"]}'
    return mes

def players_role(player_dict):
    mes = "*–ö—Ç–æ-—Ç–æ –∏–∑ –Ω–∏—Ö:*\n"
    player_keys = list(player_dict.keys())
    shuffle(player_keys)
    for i, key in enumerate(player_keys):
        mes += f'{player_dict[key]["role"]}'
        if i < len(player_keys) - 1:
            mes += ', '
    return mes

async def voice_handler(game_id):
    players = chat_list[game_id]['players']
    voice_dict = []
    for key, val in players.items():
        if 'voice' in val:
            voice_dict.append(val['voice'])
            players[key].pop('voice')
    if voice_dict:
        dead_key = max(set(voice_dict), key=voice_dict.count)
        dead = players.pop(dead_key)
        return dead

@dp.message(Command(commands=["start"]))
async def start_message(message: types.Message):
    otvet = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='start_game')]
    ])
    await message.answer('–ü—Ä–∏–≤–µ—Ç!\n–Ø –≤–µ–¥—É—â–∏–π –±–æ—Ç –ø–æ –∏–≥—Ä–µ –º–∞—Ñ–∏—èü§µüèª', reply_markup=otvet)


@dp.callback_query()
async def callback_handler(call: types.CallbackQuery):
    global chat_list
    if call.data == 'start_game':
        await call.message.answer("–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!")
    elif call.data == 'join':
        chat_id = call.message.chat.id
        chat = chat_list.get(chat_id, {'game_running': False, 'players': {}})
        players = chat['players']
        if player_in_game(call.from_user.id):
            await call.message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ')
        else:
            players[call.from_user.id] = {'name': call.from_user.first_name}
            await call.message.answer('–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ')
            chat_list[chat_id] = chat
            await update_players_list(chat_id)

    elif '–º' in call.data:
        data = call.data.split('–º')
        dead = chat_list[int(data[1])]["players"][int(data[0])]
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {dead["name"]}', reply_markup=None)
        chat_list[int(data[1])]['dead'] = (int(data[0]), dead)
        await bot.send_message(int(data[1]), 'ü§µüèª –ú–∞—Ñ–∏—è –≤—ã–±—Ä–∞–ª–∞ –∂–µ—Ä—Ç–≤—É...')

    elif '—à' in call.data:
        data = call.data.split('—à')
        checked = chat_list[int(data[1])]["players"][int(data[0])]
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=f'{checked["name"]} –æ–∫–∞–∑–∞–ª—Å—è {checked["role"]}', reply_markup=None)
        await bot.send_message(int(data[1]), 'üïµüèºÔ∏è‚Äç‚ôÇ –®–µ—Ä–∏—Ñ —É—à—ë–ª –∏—Å–∫–∞—Ç—å –∑–ª–æ–¥–µ–µ–≤...')
        chat_list[int(data[1])]['—à–µ—Ä–∏—Ñ'] = True

    elif call.data.isdigit():
        if call.from_user.id in chat_list[call.message.chat.id]['players']:
            chat_list[call.message.chat.id]['players'][call.from_user.id]['voice'] = int(call.data)


#–°–ª–æ–º–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ—Ç–∫–Ω–æ 
'''
@dp.message(ContentType(types.ContentType.NEW_CHAT_MEMBERS))
async def welcome_new_member(message: types.Message):
    if message.new_chat_members.id == 7108357216 :
        await message.answer('Welcome new member')
'''

@dp.message()
async def welcome_new_member(message: types.Message):
    if message.new_chat_members is not None and len(message.new_chat_members) > 0:
        if message.new_chat_members[0].id == 7108357216:
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫!')


            
##–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã–π -----------create_game-----------
@dp.message(Command(commands=["create_game"]))
async def get_command(message: types.Message):
    global chat_list, time_now
    chat_id = message.chat.id
    if chat_id not in chat_list:
        chat_list[chat_id] = {'game_running': False, 'players': {}}
        await message.answer('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π —á–∞—Ç.')
    chat = chat_list[chat_id]
    players = chat['players']

    if not players:
        join_btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ', callback_data='join')]
        ])
        msg = await message.answer("""–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É.
–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_game –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã""", reply_markup=join_btn)
        chat['join_message_id'] = msg.message_id
        await message.answer('–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...')

    else:
        await message.answer('–ò–≥—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ –∏–¥–µ—Ç.')


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã–π -----------start_game-----------, –∞ —Ç–∞–∫–∂–µ —Å–∞–º–æ –ø—Ä–æ—Ü–µ—Å—Å –∏–≥—Ä—ã
@dp.message(Command(commands=["start_game"]))
async def start_game(message: types.Message):
    global chat_list, time_now
    chat_id = message.chat.id
    chat = chat_list.get(chat_id, {'game_running': False, 'players': {}})
    players = chat['players']

    if len(players) >= 4 and not chat['game_running']:
        chat['game_running'] = True
        await bot.edit_message_text(chat_id=chat_id, message_id=chat['join_message_id'], text="–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!", reply_markup=None)
        del chat['join_message_id']
        player_items = list(players.items())
        shuffle(player_items)

        await change_role(player_items[0][0], players, '–º–∞—Ñ–∏—è', '–¢—ã - ü§µüèª–º–∞—Ñ–∏—è! –¢–µ–±–µ —Ä–µ—à–∞—Ç—å, –∫—Ç–æ –Ω–µ –ø—Ä–æ—Å–Ω—ë—Ç—Å—è —ç—Ç–æ–π –Ω–æ—á—å—é...')
        await change_role(player_items[1][0], players, '—à–µ—Ä–∏—Ñ', '–¢—ã - üïµüèºÔ∏è‚Äç‚ôÇ—à–µ—Ä–∏—Ñ! –ì–ª–∞–≤–Ω—ã–π –≥–æ—Ä–æ–¥—Å–∫–æ–π –∑–∞—â–∏—Ç–Ω–∏–∫ –∏ –≥—Ä–æ–∑–∞ –º–∞—Ñ–∏–∏...')
        for i in range(2, len(player_items)):
            await change_role(player_items[i][0], players, '–º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å', '–¢—ã - üë®üèº –ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –≤—ã—á–∏—Å–ª–∏—Ç—å –º–∞—Ñ–∏—é –∏ –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫–æ–º —Å–æ–±—Ä–∞–Ω–∏–∏ –∫–∞–∑–Ω–∏—Ç—å –∑–∞—Å—Ä–∞–Ω—Ü–∞!')

        await notify_players_about_roles(players)
        while True:
            if player_items[1][0] in players:
                chat['dead'] = False
                chat['—à–µ—Ä–∏—Ñ'] = False
            else:
                chat['dead'] = False
                chat['—à–µ—Ä–∏—Ñ'] = True

            await bot.send_video(chat_id, open("video/sunset.mp4", "rb"), caption='''üåÉ –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å. –ù–∞ —É–ª–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ –≤—ã—Ö–æ–¥—è—Ç –ª–∏—à—å —Å–∞–º—ã–µ –æ—Ç–≤–∞–∂–Ω—ã–µ –∏ –±–µ—Å—Å—Ç—Ä–∞—à–Ω—ã–µ. –£—Ç—Ä–æ–º –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Å—á–∏—Ç–∞—Ç—å –∏—Ö –≥–æ–ª–æ–≤—ã...''')
            await message.answer(players_alive(players) + '\n\n–°–ø–∞—Ç—å –æ—Å—Ç–∞–ª–æ—Å—å *1 –º–∏–Ω.*', parse_mode="Markdown")

            chat['dList_id'] = await list_buttons(players, chat_id, '–º–∞—Ñ–∏—è', '–ö–æ–≥–æ –±—É–¥–µ–º —É–±–∏–≤–∞—Ç—å?')
            if player_items[1][0] in players:
                chat['—àList_id'] = await list_buttons(players, chat_id, '—à–µ—Ä–∏—Ñ', '–ö–æ–≥–æ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å?')

            chat['time_event'] = datetime.now() + timedelta(seconds=60)

            while chat_list[chat_id]['time_event'] > time_now:
                await asyncio.sleep(1)
                time_now = datetime.now()

            await choice_checker(chat_id, chat, '—à–µ—Ä–∏—Ñ')

            if not chat['dead']:
                await bot.edit_message_text(chat_id=chat_id, message_id=chat['dList_id'], text='–í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ...', reply_markup=None)
                chat['dead'] = True

            dead = await voice_handler(chat_id)
            await message.answer(f'‚ò† *{dead["name"]}*.', parse_mode="Markdown")
            if dead['role'] == '—à–µ—Ä–∏—Ñ' and not any(player['role'] == '—à–µ—Ä–∏—Ñ' for player in players.values()):
                await message.answer('–ú–∞—Ñ–∏—è –≤—ã–∏–≥—Ä–∞–ª–∞! üéâ')
                chat['game_running'] = False
                break

            if not any(player['role'] == '–º–∞—Ñ–∏—è' for player in players.values()):
                await message.answer('–í—Å–µ –º–∞—Ñ–∏–∏ –º–µ—Ä—Ç–≤—ã. –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ')
                chat['game_running'] = False
                break

            await message.answer(players_alive(players), parse_mode="Markdown")

            players_btn = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=players[player_id]['name'], callback_data=str(player_id)) for player_id in players.keys()]
            ])
            await message.answer(players_role(players) + '\n*–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö...*', parse_mode="Markdown", reply_markup=players_btn)

            chat['time_event'] = datetime.now() + timedelta(seconds=60)

            while chat_list[message.chat.id]['time_event'] > time_now:
                await asyncio.sleep(1)
                time_now = datetime.now()

            dead = await voice_handler(message.chat.id)
            await message.answer(f'‚ò† *{dead["name"]}* –∫–∞–∑–Ω—ë–Ω –≥–æ—Ä–æ–∂–∞–Ω–∞–º–∏...', parse_mode="Markdown")
            if dead['role'] == '–º–∞—Ñ–∏—è':
                await message.answer('–ú–∏—Ä–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏! üéâ')
                await message.answer('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!')
                chat['game_running'] = False
                break
    else:
        await message.answer('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.')

async def cancel_registration(message: types.Message):
    global chat_list
    chat_id = message.chat.id
    user_id = message.from_user.id
    if chat_id in chat_list and user_id in chat_list[chat_id]['players']:
        chat_list[chat_id]['players'].pop(user_id)
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –∏–≥—Ä—É.')
        await update_players_list(chat_id)
    else:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.')

async def cancel_game(message: types.Message):
    global chat_list
    chat_id = message.chat.id
    if chat_id in chat_list and chat_list[chat_id]['game_running']:
        chat_list[chat_id]['game_running'] = False
        for player_id in chat_list[chat_id]['players']:
            await bot.send_message(player_id, '–ò–≥—Ä–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        await message.answer('–ò–≥—Ä–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    else:
        await message.answer('–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')

async def update_players_list(chat_id):
    global chat_list
    chat = chat_list[chat_id]
    players = chat['players']
    players_list = "*–ò–≥—Ä–æ–∫–∏, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏–µ—Å—è –∫ –∏–≥—Ä–µ:*\n"
    for player in players.values():
        players_list += f"{player['name']}\n"
    if 'join_message_id' in chat:
        await bot.edit_message_text(chat_id=chat_id, message_id=chat['join_message_id'], text=players_list, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ', callback_data='join')]
        ]))

async def notify_players_about_roles(players):
    for player_id, player_info in players.items():
        await bot.send_message(player_id, f'–í–∞—à–∞ —Ä–æ–ª—å: {player_info["role"]}')

async def main():
    dp.message.register(start_message, Command(commands=["start"]))
    dp.message.register(get_command, Command(commands=["create_game"]))
    dp.message.register(start_game, Command(commands=["start_game"]))
    dp.message.register(cancel_registration, Command(commands=["cancel_registration"]))
    dp.message.register(cancel_game, Command(commands=["cancel_game"]))
    dp.callback_query.register(callback_handler)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
